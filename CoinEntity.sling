class is SpriteEntity imports cape imports cave imports motion :

var scene as GameScene
var coinSprite as TextureSprite
var height as double
var width as double
var pHeight as double
var pWidth as double
var pX as double
var pY as double
var total1 as double
var total2 as double
var collide = false
var audioManager as AudioManager
var clip as AudioClip
var speed as double
var score as int

func createSprite override as Sprite
{
	scene = getScene() as GameScene
	height = scene.getReferenceHeight()
	width = scene.getReferenceWidth()
	var random = new Random()
	speed = 0.3
	score = 0
	audioManager = AudioManager.forApplication(scene.getContext())
	if(audioManager != null) {
		clip = audioManager.getClipForResource("coin")
	}
	coinSprite = scene.addTextureSpriteForSize(scene.createTextureForImageResource("coin"), 0.06 * width, 0.06 * height)
	coinSprite.move(width - coinSprite.getWidth(), (height - coinSprite.getHeight()) * random.nextDouble())
	return coinSprite
}

func isCollide(sprite1 as Sprite, sprite2 as Sprite) as bool
{
	collide = false
	pHeight = sprite1.getHeight() * 0.05
	pWidth = sprite1.getWidth() * 0.05
	total1 = pHeight + pWidth
	pX = sprite1.getX() - sprite2.getX()
	pY = sprite1.getY() - sprite2.getY()
	total2 = Math.sqrt(pX * pX - pY * pY)
	if(total2 < total1) {
		collide = true
	}
	return(collide)
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	if (isCollide(scene.getPony(), sprite)) {
		onTimeToPlaySoundClip()
		score++
		PRINT(score)
		scene.removeSprite(sprite)
	}
	sprite.move(sprite.getX() - delta * speed , sprite.getY())
}

func onTimeToPlaySoundClip
{
	if(clip != null) {
		clip.play()
	}
}

func cleanup override
{
	scene.removeAllSprites()
}
