class is SpriteSceneWithEntities imports cave imports cape imports motion :

var height as double
var width as double
var audioManager as AudioManager
var stream as AudioStream
var pony as PonyEntity
var star as StarEntity
var hoopD as HoopDownEntity
var hoopU as HoopUpEntity
var timer as int
var quitSprite as TextureSprite
var scoreSprite as TextSprite
var score as int
var time as int

func initialize override
{
	base.initialize()
	height = getReferenceHeight()
	width = getReferenceWidth()
	addEntity(new BackgroundEntity())
	addEntity(star = new StarEntity())
	addEntity(hoopD = new HoopDownEntity())
	addEntity(hoopU = new HoopUpEntity())
	addEntity(pony = new PonyEntity())
	quitSprite = addTextureSpriteForSize(createTextureForImageResource("quitbutton"), 0.1 * width, 0.1 * height)
	quitSprite.move(width - quitSprite.getWidth(), height - quitSprite.getHeight())
	var textprop = TextProperties.forText("Score")
	textprop.setTextColor(Color.white())
	textprop.setFontSizeRelative(0.1 * height)
	scoreSprite = addTextSprite(textprop)
	scoreSprite.move(0,0)
	timer = 0
	time = 1000
	score = 0
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null) {
		stream = audioManager.getStreamForResource("gamemusic")
	}
	onTimeToPlaySoundStream()
}

func tick (gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	timer++
	time--
	if(time > 500) {
		if((timer % 100) == 0) {
			addEntity(hoopD = new HoopDownEntity())
			addEntity(hoopU = new HoopUpEntity())
			addEntity(star = new StarEntity())
		}
	}
	else if(time <= 500) {
		if((timer % 50) == 0) {
			addEntity(hoopD = new HoopDownEntity())
			addEntity(hoopU = new HoopUpEntity())
			addEntity(star = new StarEntity())
		}
	}
	scoreSprite.setText(String.append("Score:", score))
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed) {
		return
	}
	if(event.action == PointerEvent.DOWN) {
		if(event.isInside(quitSprite.getX(), quitSprite.getY(), quitSprite.getWidth(), quitSprite.getHeight())) {
			pushScene(new GameOverScene())
		}
	}
}

func onTimeToPlaySoundStream
{
	if(stream != null) {
		stream.play()
		stream.setLooping(true)
	}
}

func getPony as PonyEntity
{
	return pony
}

func stopStream
{
	if(stream != null) {
		stream.stop()
	}
}

func getScore as int
{
	return score
}

func addScore
{
	score++
}

func getContext as ApplicationContext
{
	return context
}

func cleanup override
{
	removeAllSprites()
	removeEntity(star)
	removeEntity(hoopD)
	removeEntity(pony)
	stopStream()
}
