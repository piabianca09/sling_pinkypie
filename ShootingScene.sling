class is SpriteSceneWithEntities imports cave imports cape imports motion :

var height as double
var width as double
var audioManager as AudioManager
var stream as AudioStream
var pinky as PinkyEntity
var timer as int
var quitSprite as TextureSprite

func initialize override
{
	base.initialize()
	height = getReferenceHeight()
	width = getReferenceWidth()
	addEntity(new BackgroundEntity())
	addEntity(pinky = new PinkyEntity())
	quitSprite = addTextureSpriteForSize(createTextureForImageResource("quitbutton"), 0.1 * width, 0.1 * height)
	quitSprite.move(width - quitSprite.getWidth(), height - quitSprite.getHeight())
	timer = 0
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null) {
		stream = audioManager.getStreamForResource("gamemusic")
	}
	onTimeToPlaySoundStream()
}

func tick (gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	timer++
	if((timer % 50) == 0) {
		addEntity(pinky = new PinkyEntity())
	}
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed) {
		return
	}
	if(event.action == PointerEvent.DOWN) {
		if(event.isInside(quitSprite.getX(), quitSprite.getY(), quitSprite.getWidth(), quitSprite.getHeight())) {
			pushScene(new GameOverScene())
		}
	}
}

func onTimeToPlaySoundStream
{
	if(stream != null) {
		stream.play()
		stream.setLooping(true)
	}
}

func stopStream
{
	if(stream != null) {
		stream.stop()
	}
}

func getContext as ApplicationContext
{
	return context
}

func cleanup override
{
	removeAllSprites()
	stopStream()
}
